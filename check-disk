#!/usr/bin/env python3

# Checks the integrity of a burned disk and an ISO image file.
#
# 2013  Bence Kalmar

import argparse
import hashlib
import os
import sys

import sh


SELF_NAME = os.path.basename(sys.argv[0])

def perror(msg, exit_status=None):
    sys.stderr.write("{}: {}\n".format(SELF_NAME, msg))
    if exit_status is not None:
        sys.exit(exit_status)


parser = argparse.ArgumentParser(
    description="""
    Check the integrity of a burned disk against an ISO image using SHA-512.
    """,
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    epilog="""
    Exit status: 0: successful match; 1: failed match; 2: other error.
    """,
)

parser.add_argument(
    "-b", "--blocksize",
    default=2048,
    help="Blocksize to be used by `dd`; FILE's size must be a multiple of this",
    metavar="N",
    type=int,
)

parser.add_argument(
    "-d", "--device",
    default="/dev/cdrom",
    help="Disk device to use",
    metavar="DEV",
)

parser.add_argument(
    "-q", "--quiet",
    action="store_true",
    help="""
    Do not print anything.  Examine status code to see the result of the check
    """
)

parser.add_argument(
    "file",
    help="The ISO image file.",
    metavar="FILE",
)

args = parser.parse_args()

def plog(msg):
    if not args.quiet:
        sys.stdout.write("{}\n".format(msg))


def main():
    with open(args.file, "rb") as f:
        checksum_file = hashlib.sha512(f.read()).digest()
        size = f.tell()

    plog("checksum of {!r}:\n  {}\n".format(args.file, checksum_file))

    if size % args.blocksize != 0:
        perror("file size is not divisible by blocksize", 2)

    output = sh.dd("if={}".format(args.device), "bs={}".format(args.blocksize),
                   "count={}".format(size // args.blocksize))
    checksum_device = hashlib.sha512(output.stdout).digest()

    plog("checksum of {!r}:\n  {}\n".format(args.device, checksum_device))

    if checksum_file == checksum_device:
        plog("match successful")
        sys.exit(0)
    else:
        plog("match failed")
        sys.exit(1)


try:
    main()
except OSError as e:
    perror(e, 2)
