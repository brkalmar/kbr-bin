#!/usr/bin/env python3

# Calculate number of items needed for given delay in an MHDC.
#
# http://minecraft.gamepedia.com/Clock_circuit#Multiplicative_hopper-dropper_clock
#
# 2014  Bence Kalmar

import argparse

parser = argparse.ArgumentParser(
    description="""\
Calculate the number of items needed in the hoppers and droppers for a given
delay in an MHDC.  If the delay is not possible to achieve, the closest delay
is used.

The number of items is as small as possible.
"""
)

parser.add_argument(
    "delay",
    help="The delay in seconds.",
    metavar="DELAY",
    type=float,
)

HOPPERS_ITEMS_MAX = 160 * 2
DROPPERS_ITEMS_MAX = 288 * 2

def closest_delays(delay_sec):
    """Return all combinations of items that result in the closest delay."""
    res = []
    smallest_diff = float("inf")
    for hi in range(1, HOPPERS_ITEMS_MAX + 1):
        for di in range(1, DROPPERS_ITEMS_MAX + 1):
            delay = hi * di * 1.6
            diff = abs(delay - delay_sec)
            if diff <= smallest_diff:
                if diff < smallest_diff:
                    res = []
                smallest_diff = diff
                res.append({
                    "delay" : delay,
                    "hopper_items" : hi,
                    "dropper_items" : di
                })
    return res

def best_combination(delays):
    """Return the best combination of hopper & dropper item number."""
    return min(delays,
               key=lambda d: d["hopper_items"] + d["dropper_items"])

def print_items(delay):
    """Print the number of items in `delay`."""
    print("delay: {} s".format(delay["delay"]))
    print("hopper items: {}".format(delay["hopper_items"]))
    print("dropper items: {}".format(delay["dropper_items"]))


def main():
    args = parser.parse_args()
    delays = closest_delays(args.delay)
    delay = best_combination(delays)
    print_items(delay)

if __name__ == "__main__":
    main()
