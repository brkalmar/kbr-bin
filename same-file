#!/usr/bin/env python3

# Check if files contain the exact same data.
#
# 2013  Bence Kalmar

import sys
import os
import argparse
import hashlib
import traceback
import io

parser = argparse.ArgumentParser(
    description="""
Check if the files contain the exact same data using SHA1.

Print whether or not they are the same & indicate it with the exit status.
""",
    epilog="""\
exit status:
  0 - All files contain the exact same data.
  1 - One or more files' contents differ from each other.
  other - An error occured.
""",
    formatter_class=argparse.RawDescriptionHelpFormatter
    )

parser.add_argument(
    "-q", "--quiet",
    action="store_true",
    help="Do not print anything; the status code is the only output."
    )

parser.add_argument(
    "file1",
    help="The file to compare the others to.",
    metavar="FILE1"
    )

parser.add_argument(
    "file2",
    nargs="+",
    help="File to compare to FILE1.",
    metavar="FILE2"
    )

def sha1_file(filename, blocksize=io.DEFAULT_BUFFER_SIZE):
    res = hashlib.sha1()
    with open(filename, "rb") as f:
        for b in iter(lambda: f.read(blocksize), b""):
            res.update(b)
    return res

def exit(same):
    if same:
        sys.stdout.write("files are the same\n")
        sys.exit(0)
    else:
        sys.stdout.write("files are not the same\n")
        sys.exit(1)

def main():
    args = parser.parse_args()
    if args.quiet:
        sys.stdout = open(os.devnull, "w")

    try:
        # check sizes first
        size = os.stat(args.file1).st_size
        for f in args.file2:
            if os.stat(f).st_size != size:
                exit(False)
        # check hashes
        digest = sha1_file(args.file1).digest()
        for f in args.file2:
            if sha1_file(f).digest() != digest:
                exit(False)
    except FileNotFoundError as e:
        parser.error(e)

    exit(True)

if __name__ == "__main__":
    try:
        main()
    except BaseException as e:
        if isinstance(e, SystemExit):
            raise
        traceback.print_exc()
        sys.exit(2)
